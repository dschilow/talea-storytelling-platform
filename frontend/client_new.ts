// Code generated by the Encore v1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4005"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-talea-storytelling-platform-4ot2.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the talea-storytelling-platform-4ot2 Encore application.
 */
export default class Client {
    public readonly admin: admin.ServiceClient
    public readonly ai: ai.ServiceClient
    public readonly avatar: avatar.ServiceClient
    public readonly doku: doku.ServiceClient
    public readonly frontend: frontend.ServiceClient
    public readonly log: log.ServiceClient
    public readonly story: story.ServiceClient
    public readonly tavi: tavi.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.admin = new admin.ServiceClient(base)
        this.ai = new ai.ServiceClient(base)
        this.avatar = new avatar.ServiceClient(base)
        this.doku = new doku.ServiceClient(base)
        this.frontend = new frontend.ServiceClient(base)
        this.log = new log.ServiceClient(base)
        this.story = new story.ServiceClient(base)
        this.tavi = new tavi.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace admin {
    export interface AdminStats {
        totals: {
            users: number
            avatars: number
            stories: number
        }
        subscriptions: {
            starter: number
            familie: number
            premium: number
        }
        storiesByStatus: {
            generating: number
            complete: number
            error: number
        }
        recentActivity: {
            latestUser?: {
                id: string
                name: string
                createdAt: string
            } | null
            latestAvatar?: {
                id: string
                name: string
                createdAt: string
            } | null
            latestStory?: {
                id: string
                title: string
                createdAt: string
            } | null
        }
    }

    export interface AdminUpdateAvatarRequest {
        name?: string
        description?: string
        physicalTraits?: avatar.PhysicalTraits
        personalityTraits?: avatar.PersonalityTraits
        imageUrl?: string
        visualProfile?: avatar.AvatarVisualProfile
        isPublic?: boolean
        originalAvatarId?: string | null
    }

    export interface AdminUser {
        id: string
        email: string
        name: string
        subscription: "starter" | "familie" | "premium"
        role: "admin" | "user"
        createdAt: string
        updatedAt: string
    }

    export interface DeleteUserResponse {
        success: boolean
        removed: {
            avatars: number
            stories: number
            user: boolean
        }
    }

    export interface ListAvatarsParams {
        limit?: number
        cursor?: string
        userId?: string
        q?: string
    }

    export interface ListAvatarsResponse {
        avatars: avatar.Avatar[]
        nextCursor?: string | null
    }

    export interface ListUsersParams {
        limit?: number
        cursor?: string
        q?: string
    }

    export interface ListUsersResponse {
        users: AdminUser[]
        nextCursor?: string | null
    }

    export interface PromoteResponse {
        success: boolean
        message: string
    }

    export interface UpdateUserRequest {
        name?: string
        email?: string
        subscription?: "starter" | "familie" | "premium"
        role?: "admin" | "user"
    }

    export interface UpdateUserResponse {
        success: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteUser = this.deleteUser.bind(this)
            this.getStats = this.getStats.bind(this)
            this.listAvatarsAdmin = this.listAvatarsAdmin.bind(this)
            this.listUsers = this.listUsers.bind(this)
            this.promoteToAdmin = this.promoteToAdmin.bind(this)
            this.updateAvatarAdmin = this.updateAvatarAdmin.bind(this)
            this.updateUser = this.updateUser.bind(this)
        }

        /**
         * Deletes a user and their related content (avatars and stories).
         */
        public async deleteUser(id: string): Promise<DeleteUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/admin/users/${encodeURIComponent(id)}`)
            return await resp.json() as DeleteUserResponse
        }

        /**
         * Returns aggregate admin statistics for users, avatars, and stories.
         */
        public async getStats(): Promise<AdminStats> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/stats`)
            return await resp.json() as AdminStats
        }

        /**
         * Lists avatars across all users (admin only).
         */
        public async listAvatarsAdmin(params: ListAvatarsParams): Promise<ListAvatarsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                cursor: params.cursor,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                q:      params.q,
                userId: params.userId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/avatars`, undefined, {query})
            return await resp.json() as ListAvatarsResponse
        }

        /**
         * Lists users with optional search and pagination for the admin panel.
         */
        public async listUsers(params: ListUsersParams): Promise<ListUsersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                cursor: params.cursor,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                q:      params.q,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/users`, undefined, {query})
            return await resp.json() as ListUsersResponse
        }

        /**
         * Allows the first-ever user to promote themselves to an admin.
         * This endpoint is a one-time-use mechanism for bootstrapping the first admin account.
         */
        public async promoteToAdmin(): Promise<PromoteResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/promote-first-admin`)
            return await resp.json() as PromoteResponse
        }

        /**
         * Updates any avatar fields (admin only).
         */
        public async updateAvatarAdmin(id: string, params: AdminUpdateAvatarRequest): Promise<avatar.Avatar> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/avatars/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as avatar.Avatar
        }

        /**
         * Updates basic fields for a user (admin only).
         */
        public async updateUser(id: string, params: UpdateUserRequest): Promise<UpdateUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/users/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateUserResponse
        }
    }
}

export namespace ai {
    export interface AnalyzeAvatarImageRequest {
        imageUrl: string
        hints?: {
            name?: string
            physicalTraits?: avatar.PhysicalTraits
            personalityTraits?: avatar.PersonalityTraits
            expectedType?: "human" | "anthropomorphic" | "animal" | "fantasy"
            culturalContext?: string
            stylePreference?: "photorealistic" | "cinematic" | "artistic" | "illustrated"
        }
    }

    export interface AnalyzeAvatarImageResponse {
        success: boolean
        visualProfile: any
        tokensUsed?: {
            prompt: number
            completion: number
            total: number
        }
        processingTime?: number
    }

    export interface BatchGenerationRequest {
        images: BatchImageInput[]
    }

    export interface BatchGenerationResponse {
        images: BatchImageOutput[]
        debug: {
            processingTime: number
            ok: boolean
            status: number
            errorMessage: string
        }
    }

    export interface BatchImageInput {
        /**
         * All fields required for Encore schemas; callers should pass defaults where needed.
         */
        prompt: string

        model: string
        width: number
        height: number
        steps: number
        CFGScale?: number
        seed: number
        referenceImages: string[]
        outputFormat: "WEBP" | "PNG" | "JPEG"
        negativePrompt?: string
    }

    export interface BatchImageOutput {
        imageUrl: string
        seed: number
        debugInfo: DebugInfo
    }

    export interface CheckPersonalityUpdateRequest {
        avatarId: string
        contentId: string
        contentType: "story" | "doku" | "quiz"
    }

    export interface DebugInfo {
        requestSent: any
        responseReceived: any
        processingTime: number
        success: boolean
        errorMessage: string
        contentType: string
        extractedFromPath: string
        responseStatus: number
        referencesCount: number
    }

    export interface GenerateAvatarImageRequest {
        characterType: string
        appearance: string
        personalityTraits: avatar.PersonalityTraits
        style?: "realistic" | "disney" | "anime"
    }

    export interface GenerateAvatarImageResponse {
        imageUrl: string
        prompt: string
        debugInfo?: any
    }

    export interface ImageGenerationRequest {
        prompt: string
        model?: string
        width?: number
        height?: number
        steps?: number
        CFGScale?: number
        seed?: number
        outputFormat?: "WEBP" | "PNG" | "JPEG"
        negativePrompt?: string
    }

    export interface ImageGenerationResponse {
        imageUrl: string
        seed: number
        debugInfo: DebugInfo
    }

    export interface PersonalityAnalysisRequest {
        avatarId: string
        avatarProfile: {
            name: string
            description: string
            currentPersonality: { [key: string]: number }
        }
        contentType: "story" | "doku" | "quiz"
        contentData: {
            title: string
            summary?: string
            learningMode?: {
                enabled: boolean
                subjects: string[]
                difficulty: string
                objectives: string[]
            }
            /**
             * For stories
             */
            storyContent?: string

            /**
             * For dokus
             */
            dokuSections?: {
                title: string
                content: string
                topic: string
            }[]

            /**
             * For quizzes
             */
            quizData?: {
                topic: string
                questions: {
                    question: string
                    correctAnswer: string
                    userAnswer: string
                    isCorrect: boolean
                }[]
                score: number
            }
        }
    }

    export interface PersonalityAnalysisResponse {
        success: boolean
        changes: {
            trait: string
            oldValue: number
            newValue: number
            change: number
            reason: string
        }[]
        summary: string
        processingTime: number
        tokensUsed: {
            prompt: number
            completion: number
            total: number
        }
    }

    export interface TrackPersonalityUpdateRequest {
        avatarId: string
        contentId: string
        contentType: "story" | "doku" | "quiz"
        contentTitle: string
        changes: {
            trait: string
            oldValue: number
            newValue: number
            change: number
            reason: string
        }[]
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.analyzeAvatarImage = this.analyzeAvatarImage.bind(this)
            this.analyzePersonalityDevelopment = this.analyzePersonalityDevelopment.bind(this)
            this.checkPersonalityUpdate = this.checkPersonalityUpdate.bind(this)
            this.generateAvatarImage = this.generateAvatarImage.bind(this)
            this.generateImage = this.generateImage.bind(this)
            this.generateImagesBatch = this.generateImagesBatch.bind(this)
            this.getPersonalityHistory = this.getPersonalityHistory.bind(this)
            this.trackPersonalityUpdate = this.trackPersonalityUpdate.bind(this)
        }

        /**
         * PRODUCTION-READY SOLUTION: Nur basic analysis, 100% stabil
         */
        public async analyzeAvatarImage(params: AnalyzeAvatarImageRequest): Promise<AnalyzeAvatarImageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/analyze-avatar-image`, JSON.stringify(params))
            return await resp.json() as AnalyzeAvatarImageResponse
        }

        public async analyzePersonalityDevelopment(params: PersonalityAnalysisRequest): Promise<PersonalityAnalysisResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/analyze-personality`, JSON.stringify(params))
            return await resp.json() as PersonalityAnalysisResponse
        }

        /**
         * Check if avatar already received updates from this content
         */
        public async checkPersonalityUpdate(params: {
    /**
     * Check if avatar already received updates from this content
     */
    query: CheckPersonalityUpdateRequest
}): Promise<{
    /**
     * Check if avatar already received updates from this content
     */
    hasUpdates: boolean

    /**
     * Check if avatar already received updates from this content
     */
    lastUpdate?: string
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                query: String(params.query),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/ai/check-personality-update`, undefined, {query})
            return await resp.json() as {
    /**
     * Check if avatar already received updates from this content
     */
    hasUpdates: boolean

    /**
     * Check if avatar already received updates from this content
     */
    lastUpdate?: string
}
        }

        /**
         * Generates an avatar image based on physical and personality traits.
         */
        public async generateAvatarImage(params: GenerateAvatarImageRequest): Promise<GenerateAvatarImageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/generate-avatar`, JSON.stringify(params))
            return await resp.json() as GenerateAvatarImageResponse
        }

        /**
         * Public API endpoint wrapper that calls the internal helper.
         */
        public async generateImage(params: ImageGenerationRequest): Promise<ImageGenerationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/generate-image`, JSON.stringify(params))
            return await resp.json() as ImageGenerationResponse
        }

        /**
         * Public API endpoint for batch generation.
         */
        public async generateImagesBatch(params: BatchGenerationRequest): Promise<BatchGenerationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/generate-images-batch`, JSON.stringify(params))
            return await resp.json() as BatchGenerationResponse
        }

        /**
         * Get all personality updates for an avatar (for history/debugging)
         */
        public async getPersonalityHistory(avatarId: string): Promise<{
    updates: {
        id: string
        contentId: string
        contentType: string
        contentTitle: string
        changes: {
            trait: string
            oldValue: number
            newValue: number
            change: number
            reason: string
        }[]
        createdAt: string
    }[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/ai/personality-history/${encodeURIComponent(avatarId)}`)
            return await resp.json() as {
    updates: {
        id: string
        contentId: string
        contentType: string
        contentTitle: string
        changes: {
            trait: string
            oldValue: number
            newValue: number
            change: number
            reason: string
        }[]
        createdAt: string
    }[]
}
        }

        /**
         * Track that an avatar received personality updates from content
         */
        public async trackPersonalityUpdate(params: TrackPersonalityUpdateRequest): Promise<{
    /**
     * Track that an avatar received personality updates from content
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/track-personality-update`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * Track that an avatar received personality updates from content
     */
    success: boolean
}
        }
    }
}

export namespace auth {
    export interface AuthParams {
        /**
         * Bearer token (recommended).
         */
        authorization?: string
    }
}

export namespace avatar {
    export interface Avatar {
        id: string
        userId: string
        name: string
        description?: string
        physicalTraits: PhysicalTraits
        personalityTraits: PersonalityTraits
        imageUrl?: string
        visualProfile?: AvatarVisualProfile
        creationType: "ai-generated" | "photo-upload"
        isPublic: boolean
        originalAvatarId?: string
        createdAt: string
        updatedAt: string
    }

    export interface AvatarVisualProfile {
        ageApprox: string
        gender: string
        skin: {
            tone: string
            undertone?: string | null
            distinctiveFeatures?: string[]
        }
        hair: {
            color: string
            type: string
            length: string
            style: string
        }
        eyes: {
            color: string
            shape?: string | null
            size?: string | null
        }
        face: {
            shape?: string | null
            nose?: string | null
            mouth?: string | null
            eyebrows?: string | null
            freckles?: boolean
            otherFeatures?: string[]
        }
        accessories: string[]
        clothingCanonical?: {
            top?: string | null
            bottom?: string | null
            outfit?: string | null
            colors?: string[]
            patterns?: string[]
        }
        palette?: {
            primary: string[]
            secondary?: string[]
        }
        consistentDescriptors: string[]
    }

    export interface CreateAvatarRequest {
        name: string
        description?: string
        physicalTraits: PhysicalTraits
        personalityTraits: PersonalityTraits
        imageUrl?: string
        visualProfile?: AvatarVisualProfile
        creationType: "ai-generated" | "photo-upload"
    }

    export interface ListAvatarsResponse {
        avatars: Avatar[]
    }

    export interface PersonalityTraits {
        courage: number
        intelligence: number
        creativity: number
        empathy: number
        strength: number
        humor: number
        adventure: number
        patience: number
        curiosity: number
        leadership: number
    }

    export interface PhysicalTraits {
        characterType: string
        appearance: string
    }

    export interface UpdateAvatarRequest {
        name?: string
        description?: string
        physicalTraits?: PhysicalTraits
        personalityTraits?: PersonalityTraits
        imageUrl?: string
        visualProfile?: AvatarVisualProfile
        isPublic?: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteAvatar = this.deleteAvatar.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new avatar for the authenticated user.
         */
        public async create(params: CreateAvatarRequest): Promise<Avatar> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/avatar`, JSON.stringify(params))
            return await resp.json() as Avatar
        }

        /**
         * Deletes an avatar.
         */
        public async deleteAvatar(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/avatar/${encodeURIComponent(id)}`)
        }

        /**
         * Retrieves a specific avatar by ID.
         */
        public async get(id: string): Promise<Avatar> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/avatar/${encodeURIComponent(id)}`)
            return await resp.json() as Avatar
        }

        /**
         * Retrieves all avatars for the authenticated user.
         */
        public async list(): Promise<ListAvatarsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/avatars`)
            return await resp.json() as ListAvatarsResponse
        }

        /**
         * Updates an existing avatar.
         */
        public async update(id: string, params: UpdateAvatarRequest): Promise<Avatar> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/avatar/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as Avatar
        }
    }
}

export namespace doku {
    export interface Doku {
        id: string
        userId: string
        title: string
        topic: string
        summary: string
        content: {
            sections: DokuSection[]
        }
        coverImageUrl?: string
        isPublic: boolean
        status: "generating" | "complete" | "error"
        metadata?: {
            tokensUsed?: {
                prompt: number
                completion: number
                total: number
            }
            model?: string
            processingTime?: number
            imagesGenerated?: number
            totalCost?: {
                text: number
                images: number
                total: number
            }
        }
        createdAt: string
        updatedAt: string
    }

    export type DokuAgeGroup = "3-5" | "6-8" | "9-12" | "13+"

    export interface DokuConfig {
        topic: string
        depth: DokuDepth
        ageGroup: DokuAgeGroup
        perspective?: "science" | "history" | "technology" | "nature" | "culture"
        includeInteractive?: boolean
        quizQuestions?: number
        handsOnActivities?: number
        tone?: "fun" | "neutral" | "curious"
        length?: "short" | "medium" | "long"
    }

    export type DokuDepth = "basic" | "standard" | "deep"

    export interface DokuInteractive {
        quiz?: {
            enabled: boolean
            questions: {
                question: string
                options: string[]
                answerIndex: number
                explanation?: string
            }[]
        }
        activities?: {
            enabled: boolean
            items: {
                title: string
                description: string
                materials?: string[]
                durationMinutes?: number
            }[]
        }
    }

    export interface DokuSection {
        title: string
        content: string
        keyFacts: string[]
        imageIdea?: string
        interactive?: DokuInteractive
    }

    export interface GenerateDokuRequest {
        userId: string
        config: DokuConfig
    }

    export interface ListDokusResponse {
        dokus: {
            id: string
            userId: string
            title: string
            topic: string
            coverImageUrl?: string
            isPublic: boolean
            status: "generating" | "complete" | "error"
            metadata?: {
                tokensUsed?: {
                    prompt: number
                    completion: number
                    total: number
                }
                model?: string
                processingTime?: number
                imagesGenerated?: number
                totalCost?: {
                    text: number
                    images: number
                    total: number
                }
            }
            createdAt: string
            updatedAt: string
            summary?: string
        }[]
    }

    export interface UpdateDokuRequest {
        title?: string
        isPublic?: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteDoku = this.deleteDoku.bind(this)
            this.generateDoku = this.generateDoku.bind(this)
            this.getDoku = this.getDoku.bind(this)
            this.listDokus = this.listDokus.bind(this)
            this.updateDoku = this.updateDoku.bind(this)
        }

        public async deleteDoku(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/doku/${encodeURIComponent(id)}`)
        }

        public async generateDoku(params: GenerateDokuRequest): Promise<Doku> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/doku/generate`, JSON.stringify(params))
            return await resp.json() as Doku
        }

        /**
         * Retrieves a specific doku (only owner or admin or if public).
         */
        public async getDoku(id: string): Promise<Doku> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/doku/${encodeURIComponent(id)}`)
            return await resp.json() as Doku
        }

        /**
         * Lists all dokus for the authenticated user.
         */
        public async listDokus(): Promise<ListDokusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/dokus`)
            return await resp.json() as ListDokusResponse
        }

        public async updateDoku(id: string, params: UpdateDokuRequest): Promise<{
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/doku/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as {
    success: boolean
}
        }
    }
}

export namespace frontend {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assets = this.assets.bind(this)
        }

        public async assets(path: string[]): Promise<void> {
            await this.baseClient.callTypedAPI("HEAD", `/frontend/${path.map(encodeURIComponent).join("/")}`)
        }
    }
}

export namespace log {
    export interface GetLogSourcesResponse {
        sources: LogSource[]
    }

    export interface ListLogsRequest {
        source?: string
        limit?: number
        date?: string
    }

    export interface ListLogsResponse {
        logs: LogEntry[]
        totalCount: number
    }

    export interface LogEntry {
        id: string
        source: "openai-story-generation" | "runware-single-image" | "runware-batch-image" | "openai-avatar-analysis" | "openai-avatar-analysis-stable" | "openai-doku-generation" | "openai-tavi-chat"
        timestamp: string
        request: any
        response: any
        metadata?: any
    }

    export interface LogSource {
        name: string
        count: number
        lastActivity: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.get = this.get.bind(this)
            this.getSources = this.getSources.bind(this)
            this.list = this.list.bind(this)
        }

        /**
         * Retrieves a specific log entry by ID.
         */
        public async get(id: string): Promise<LogEntry> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/log/get/${encodeURIComponent(id)}`)
            return await resp.json() as LogEntry
        }

        /**
         * Gets available log sources with statistics.
         */
        public async getSources(): Promise<GetLogSourcesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/log/getSources`)
            return await resp.json() as GetLogSourcesResponse
        }

        /**
         * Lists log entries from the bucket.
         */
        public async list(params: ListLogsRequest): Promise<ListLogsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                date:   params.date,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                source: params.source,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/log/list`, undefined, {query})
            return await resp.json() as ListLogsResponse
        }
    }
}

export namespace story {
    export interface AvatarDevelopment {
        avatarId: string
        name: string
        changedTraits: { [key: string]: {
            before: number
            after: number
            reason: string
        } }
        newSkills: string[]
        personalGrowth: string[]
        memoryAdditions: {
            experiences: string[]
            relationships: { [key: string]: string }
        }
    }

    export interface Chapter {
        id: string
        title: string
        content: string
        imageUrl?: string
        order: number
    }

    export interface ChapterImageDescription {
        scene: string
        characters: { [key: string]: {
            position: string
            expression: string
            action: string
            clothing: string
        } }
        environment: {
            setting: string
            lighting: string
            atmosphere: string
            objects: string[]
        }
        composition?: {
            foreground: string
            background: string
            focus: string
        }
    }

    export interface CoverImageDescription {
        mainScene: string
        characters: { [key: string]: {
            position: string
            expression: string
            pose: string
        } }
        environment: {
            setting: string
            mood: string
            colorPalette: string[]
        }
        composition?: {
            layout: string
            titleSpace: string
            visualFocus: string
        }
    }

    export interface ExtendedAvatarDetails {
        id: string
        name: string
        description?: string
        physicalTraits: avatar.PhysicalTraits
        personalityTraits: avatar.PersonalityTraits
        imageUrl?: string
        visualProfile?: avatar.AvatarVisualProfile
        creationType: "ai-generated" | "photo-upload"
        isPublic: boolean
        memory?: {
            experiences: string[]
            learnedSkills: string[]
            personalGrowth: string[]
            relationships: { [key: string]: string }
        }
        currentLevel?: {
            knowledge: number
            emotional: number
            social: number
            creativity: number
        }
    }

    export interface GenerateStoryContentRequest {
        config: StoryConfig
        avatarDetails: ExtendedAvatarDetails[]
    }

    export interface GenerateStoryContentResponse {
        title: string
        description: string
        coverImageUrl: string
        coverImageDescription: CoverImageDescription
        chapters: {
            title: string
            content: string
            imageUrl?: string
            order: number
            imageDescription: ChapterImageDescription
        }[]
        avatarDevelopments: AvatarDevelopment[]
        learningOutcomes: LearningOutcome[]
        metadata: {
            tokensUsed: {
                prompt: number
                completion: number
                total: number
            }
            model: string
            processingTime: number
            imagesGenerated: number
            totalCost: {
                text: number
                images: number
                total: number
            }
        }
    }

    export interface GenerateStoryRequest {
        userId: string
        config: StoryConfig
    }

    export interface LearningMode {
        enabled: boolean
        subjects: string[]
        difficulty: "beginner" | "intermediate" | "advanced"
        learningObjectives: string[]
        assessmentType: "quiz" | "interactive" | "discussion"
    }

    export interface LearningOutcome {
        subject: string
        newConcepts: string[]
        reinforcedSkills: string[]
        "difficulty_mastered": string
        "practical_applications": string[]
    }

    export interface ListStoriesResponse {
        stories: StorySummary[]
    }

    export interface Story {
        id: string
        userId: string
        title: string
        description: string
        coverImageUrl?: string
        config: StoryConfig
        chapters: Chapter[]
        status: "generating" | "complete" | "error"
        metadata?: {
            tokensUsed?: {
                prompt: number
                completion: number
                total: number
            }
            model?: string
            processingTime?: number
            imagesGenerated?: number
            totalCost?: {
                text: number
                images: number
                total: number
            }
        }
        createdAt: string
        updatedAt: string
    }

    export interface StoryConfig {
        avatarIds: string[]
        genre: string
        setting: string
        length: "short" | "medium" | "long"
        complexity: "simple" | "medium" | "complex"
        learningMode?: LearningMode
        ageGroup: "3-5" | "6-8" | "9-12" | "13+"
    }

    export interface StorySummary {
        id: string
        userId: string
        title: string
        description: string
        coverImageUrl?: string
        config: StoryConfig
        status: "generating" | "complete" | "error"
        metadata?: {
            tokensUsed?: {
                prompt: number
                completion: number
                total: number
            }
            model?: string
            processingTime?: number
            imagesGenerated?: number
            totalCost?: {
                text: number
                images: number
                total: number
            }
        }
        createdAt: string
        updatedAt: string
    }

    export interface UpdateStoryRequest {
        title?: string
        description?: string
        isPublic?: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteStory = this.deleteStory.bind(this)
            this.generate = this.generate.bind(this)
            this.generateStoryContent = this.generateStoryContent.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Deletes a story and all its chapters.
         */
        public async deleteStory(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/story/${encodeURIComponent(id)}`)
        }

        /**
         * Generates a new story based on the provided configuration.
         */
        public async generate(params: GenerateStoryRequest): Promise<Story> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/story/generate`, JSON.stringify(params))
            return await resp.json() as Story
        }

        public async generateStoryContent(params: GenerateStoryContentRequest): Promise<GenerateStoryContentResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ai/generate-story`, JSON.stringify(params))
            return await resp.json() as GenerateStoryContentResponse
        }

        /**
         * Retrieves a specific story by ID with all chapters.
         */
        public async get(id: string): Promise<Story> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/story/${encodeURIComponent(id)}`)
            return await resp.json() as Story
        }

        /**
         * Retrieves all stories for the authenticated user.
         */
        public async list(): Promise<ListStoriesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/stories`)
            return await resp.json() as ListStoriesResponse
        }

        /**
         * Updates an existing story's metadata.
         */
        public async update(id: string, params: UpdateStoryRequest): Promise<{
    /**
     * Updates an existing story's metadata.
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/story/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * Updates an existing story's metadata.
     */
    success: boolean
}
        }
    }
}

export namespace tavi {
    export interface TaviChatRequest {
        message: string
    }

    export interface TaviChatResponse {
        response: string
        tokensUsed: {
            prompt: number
            completion: number
            total: number
        }
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.taviChat = this.taviChat.bind(this)
        }

        public async taviChat(params: TaviChatRequest): Promise<TaviChatResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/tavi/chat`, JSON.stringify(params))
            return await resp.json() as TaviChatResponse
        }
    }
}

export namespace user {
    export interface CreateUserRequest {
        email: string
        name: string
        subscription?: "starter" | "familie" | "premium"
        role?: "admin" | "user"
    }

    export interface UserProfile {
        id: string
        email: string
        name: string
        subscription: "starter" | "familie" | "premium"
        role: "admin" | "user"
        createdAt: string
        updatedAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.me = this.me.bind(this)
        }

        /**
         * Creates a new user profile.
         */
        public async create(params: CreateUserRequest): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/user`, JSON.stringify(params))
            return await resp.json() as UserProfile
        }

        /**
         * Retrieves a user profile by ID.
         */
        public async get(id: string): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/${encodeURIComponent(id)}`)
            return await resp.json() as UserProfile
        }

        /**
         * Returns the authenticated user's profile.
         * The auth handler ensures the user exists in the database.
         */
        public async me(): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/me`)
            return await resp.json() as UserProfile
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "talea-storytelling-platform-4ot2-Generated-TS-Client (Encore/v1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
