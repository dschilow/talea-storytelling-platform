# Stage 1: Build the frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy frontend files
COPY frontend/package*.json ./frontend/
COPY frontend/ ./frontend/

# Install frontend dependencies and build
WORKDIR /app/frontend
RUN npm install
RUN npm run build

# Stage 2: Build Encore backend
FROM golang:1.22-bookworm AS encore-builder

# Install Node.js and bun for backend dependencies
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g bun

# Install Encore CLI
RUN curl -L https://encore.dev/install.sh | bash

WORKDIR /app

# Copy backend code
COPY backend/ ./backend/

# Install backend dependencies
WORKDIR /app/backend
RUN bun install

# Copy built frontend into backend
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# For Encore TS apps, we just need the source code
# We'll use Encore daemon in production
RUN mkdir -p ./output

# Stage 3: Production image with Encore daemon only
FROM node:20-bookworm-slim

# Cache buster - change this to force rebuild
ENV CACHE_BUST=2025-10-16-v1-with-caddy-and-frontend

WORKDIR /app

# Install runtime dependencies plus Encore CLI, Caddy, and PostgreSQL client
RUN apt-get update && \
    apt-get install -y curl ca-certificates debian-keyring debian-archive-keyring apt-transport-https postgresql-client && \
    # Install Caddy
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg && \
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list && \
    apt-get update && \
    apt-get install -y caddy && \
    # Install bun
    npm install -g bun && \
    # Install Encore
    curl -L https://encore.dev/install.sh | bash && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy backend source code
COPY --from=encore-builder /app/backend ./

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Copy Caddyfile for CORS handling
COPY backend/Caddyfile /app/Caddyfile

# Copy runtime start scripts and migrations runner
COPY backend/start.sh ./start.sh
COPY backend/run-migrations.cjs ./run-migrations.cjs
RUN chmod +x ./start.sh

# Install production dependencies (including pg for migrations)
RUN bun install --production && npm install pg

# Expose HTTP port
EXPOSE 8080

# Start with Caddy for CORS handling
CMD ["/app/start.sh"]
