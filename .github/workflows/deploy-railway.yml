name: Build and Deploy Encore App to Railway

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build frontend assets
        run: |
          cd backend
          bun run build

      - name: Install Encore CLI
        run: |
          curl -L https://encore.dev/install.sh | bash
          echo "$HOME/.encore/bin" >> $GITHUB_PATH

      - name: Patch database configuration with Railway PostgreSQL values
        run: |
          node -e "
          const fs = require('fs');
          const path = 'backend/railway-infra.config.json';
          const config = JSON.parse(fs.readFileSync(path, 'utf8'));

          // Hardcoded Railway PostgreSQL values for build
          const host = 'postgres.railway.internal';
          const user = 'postgres';
          const password = 'HqJVXXiJiVtiCOJuOmEatCjuTEULvpjr';
          const database = 'railway';

          if (config.sql_servers && config.sql_servers[0] && config.sql_servers[0].databases) {
            config.sql_servers[0].host = host;
            // databases is an object/map, not an array
            Object.keys(config.sql_servers[0].databases).forEach(dbKey => {
              config.sql_servers[0].databases[dbKey].username = user;
              config.sql_servers[0].databases[dbKey].password = password;
              config.sql_servers[0].databases[dbKey].database_name = database;
            });
          }

          fs.writeFileSync(path, JSON.stringify(config, null, 2));
          console.log('✅ Patched railway-infra.config.json');
          console.log('   Host:', host);
          console.log('   User:', user);
          console.log('   Database:', database);
          "


      - name: Verify Encore CLI
        run: encore version

      - name: Build Encore Docker image
        run: |
          cd backend
          encore build --config railway-infra.config.json docker myapp --verbose

      - name: Tag Docker image for GitHub Container Registry
        run: |
          docker tag myapp ghcr.io/${{ github.repository }}:latest
          docker tag myapp ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Push Docker images
        run: |
          docker push ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Set up Node for Railway trigger
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Trigger Railway deployment (skips if secrets missing)
        continue-on-error: true
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: node scripts/trigger-railway-deploy.mjs

      - name: Deployment Summary
        run: |
          echo "Docker image built and pushed successfully"
          echo "  Image: ghcr.io/${{ github.repository }}:latest"
          echo "  SHA: ghcr.io/${{ github.repository }}:${{ github.sha }}"
          echo ""
          echo "Next steps if auto-redeploy is not configured:"
          echo "  1. Open Railway dashboard"
          echo "  2. Ensure service source is ghcr.io/${{ github.repository }}:latest"
          echo "  3. Verify PORT=8080 and required environment variables"
          echo "  4. Trigger a redeploy manually if needed"
